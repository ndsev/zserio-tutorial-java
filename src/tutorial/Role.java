/**
 * Automatically generated by Zserio Java extension version 1.4.0.
 */

package tutorial;

import javax.annotation.Generated;
import java.io.IOException;
import zserio.runtime.SizeOf;
import zserio.runtime.ZserioEnum;
import zserio.runtime.ZserioError;
import zserio.runtime.io.BitStreamReader;
import zserio.runtime.io.BitStreamWriter;
import zserio.runtime.io.InitializeOffsetsWriter;

@Generated(
    value = "zserio.tools.ZserioTool",
    comments = "generated by Zserio Java extension version 1.4.0"
)
public enum Role implements InitializeOffsetsWriter, SizeOf, ZserioEnum
{
    DEVELOPER((short)0),
    TEAM_LEAD((short)1),
    CTO((short)2);

    private Role(short __value)
    {
        this.__value = __value;
    }

    public short getValue()
    {
        return __value;
    }

    @Override
    public Number getGenericValue()
    {
        return __value;
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long __bitPosition)
    {
        return 8;
    }

    @Override
    public long initializeOffsets(long __bitPosition) throws ZserioError
    {
        return __bitPosition + bitSizeOf(__bitPosition);
    }

    @Override
    public void write(BitStreamWriter __out) throws IOException
    {
        write(__out, false);
    }

    @Override
    public void write(BitStreamWriter __out, boolean __callInitializeOffsets) throws IOException
    {
        __out.writeUnsignedByte(getValue());
    }

    public static Role readEnum(BitStreamReader __in) throws IOException
    {
        return toEnum(__in.readUnsignedByte());
    }

    public static Role toEnum(short __value)
    {
        switch (__value)
        {
            case (short)0:
                return DEVELOPER;
            case (short)1:
                return TEAM_LEAD;
            case (short)2:
                return CTO;
            default:
                throw new IllegalArgumentException("Unknown value for enumeration Role: " + __value + "!");
        }
    }

    private short __value;
}
