/**
 * Automatically generated by Zserio Java extension version 2.3.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package tutorial;

public class Employee implements zserio.runtime.io.InitializeOffsetsWriter, zserio.runtime.SizeOf
{
    public Employee()
    {
    }

    public Employee(java.io.File file)
            throws java.io.IOException, zserio.runtime.ZserioError
    {
        final zserio.runtime.io.FileBitStreamReader in = new zserio.runtime.io.FileBitStreamReader(file);
        read(in);
        in.close();
    }

    public Employee(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException, zserio.runtime.ZserioError
    {
        read(in);
    }

    public Employee(
        short age_,
        java.lang.String name_,
        int salary_,
        java.lang.Integer bonus_,
        tutorial.Role role_,
        zserio.runtime.array.ObjectArray<tutorial.Experience> skills_)
    {
        setAge(age_);
        setName(name_);
        setSalary(salary_);
        setBonus(bonus_);
        setRole(role_);
        setSkills(skills_);
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getName());
        endBitPosition += 16;
        endBitPosition += 1;
        if (this.bonus_ != null)
        {
            endBitPosition += 16;
        }
        endBitPosition += getRole().bitSizeOf(endBitPosition);
        if (getRole() == tutorial.Role.DEVELOPER)
        {
            endBitPosition += getSkills().bitSizeOfAuto(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public short getAge()
    {
        return this.age_;
    }

    public void setAge(short age_)
    {
        this.age_ = age_;
    }

    public java.lang.String getName()
    {
        return this.name_;
    }

    public void setName(java.lang.String name_)
    {
        this.name_ = name_;
    }

    public int getSalary()
    {
        return this.salary_;
    }

    public void setSalary(int salary_)
    {
        this.salary_ = salary_;
    }

    public java.lang.Integer getBonus()
    {
        return this.bonus_;
    }

    public void setBonus(java.lang.Integer bonus_)
    {
        this.bonus_ = bonus_;
    }

    public boolean isBonusUsed()
    {
        return (this.bonus_ != null);
    }

    public tutorial.Role getRole()
    {
        return this.role_;
    }

    public void setRole(tutorial.Role role_)
    {
        this.role_ = role_;
    }

    public zserio.runtime.array.ObjectArray<tutorial.Experience> getSkills()
    {
        return this.skills_;
    }

    public void setSkills(zserio.runtime.array.ObjectArray<tutorial.Experience> skills_)
    {
        this.skills_ = skills_;
    }

    public void setSkills(java.util.List<tutorial.Experience> skills_)
    {
        this.skills_ = new zserio.runtime.array.ObjectArray<tutorial.Experience>(skills_);
    }

    public boolean isSkillsUsed()
    {
        return (getRole() == tutorial.Role.DEVELOPER);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Employee)
        {
            final Employee that = (Employee)obj;

            return
                    this.age_ == that.age_ &&
                    ((this.name_ == null) ? that.name_ == null : this.name_.equals(that.name_)) &&
                    this.salary_ == that.salary_ &&
                    ((this.bonus_ == null) ? that.bonus_ == null : this.bonus_.equals(that.bonus_)) &&
                    ((this.role_ == null) ? that.role_ == null : this.role_.getValue() == that.role_.getValue()) &&
                    (!(getRole() == tutorial.Role.DEVELOPER) ||
                    ((this.skills_ == null) ? that.skills_ == null : this.skills_.equals(that.skills_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.Util.HASH_SEED;

        result = zserio.runtime.Util.HASH_PRIME_NUMBER * result + this.age_;
        result = zserio.runtime.Util.HASH_PRIME_NUMBER * result +
                ((this.name_ == null) ? 0 : this.name_.hashCode());
        result = zserio.runtime.Util.HASH_PRIME_NUMBER * result + this.salary_;
        result = zserio.runtime.Util.HASH_PRIME_NUMBER * result +
                ((this.bonus_ == null) ? 0 : this.bonus_.hashCode());
        result = zserio.runtime.Util.HASH_PRIME_NUMBER * result +
                ((this.role_ == null) ? 0 : this.role_.hashCode());
        if (getRole() == tutorial.Role.DEVELOPER)
            result = zserio.runtime.Util.HASH_PRIME_NUMBER * result +
                    ((this.skills_ == null) ? 0 : this.skills_.hashCode());

        return result;
    }

    public void read(final zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException, zserio.runtime.ZserioError
    {
        this.age_ = in.readUnsignedByte();

        this.name_ = in.readString();

        this.salary_ = in.readUnsignedShort();

        if (in.readBool())
        {
            this.bonus_ = in.readUnsignedShort();
        }

        this.role_ = tutorial.Role.readEnum(in);

        if (getRole() == tutorial.Role.DEVELOPER)
        {
            this.skills_ = new zserio.runtime.array.ObjectArray<tutorial.Experience>(in,
                    zserio.runtime.array.Array.AUTO_LENGTH,
                    new ElementFactory_skills());
        }

        checkConstraints();
    }

    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getName());
        endBitPosition += 16;
        endBitPosition += 1;
        if (this.bonus_ != null)
        {
            endBitPosition += 16;
        }
        endBitPosition += getRole().bitSizeOf(endBitPosition);
        if (getRole() == tutorial.Role.DEVELOPER)
        {
            endBitPosition = getSkills().initializeOffsetsAuto(endBitPosition);
        }

        return endBitPosition;
    }

    public void write(java.io.File file) throws java.io.IOException, zserio.runtime.ZserioError
    {
        zserio.runtime.io.FileBitStreamWriter out = new zserio.runtime.io.FileBitStreamWriter(file);
        write(out);
        out.close();
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException, zserio.runtime.ZserioError
    {
        write(out, true);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out, boolean callInitializeOffsets)
            throws java.io.IOException, zserio.runtime.ZserioError
    {
        checkConstraints();
        out.writeUnsignedByte(getAge());

        out.writeString(getName());

        out.writeUnsignedShort(getSalary());

        if (this.bonus_ != null)
        {
            out.writeBool(true);
            out.writeUnsignedShort(getBonus());
        }
        else
        {
            out.writeBool(false);
        }

        getRole().write(out, false);

        if (getRole() == tutorial.Role.DEVELOPER)
        {
            getSkills().writeAuto(out);
        }
    }

    private void checkConstraints() throws zserio.runtime.ZserioError
    {
        if (!(getAge() <= 65))
            throw new zserio.runtime.ConstraintError("Constraint violated at Employee.age!");
    }

    private static final class ElementFactory_skills implements zserio.runtime.array.ElementFactory<tutorial.Experience>
    {
        @Override
        public tutorial.Experience create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException, zserio.runtime.ZserioError
        {
            return new tutorial.Experience(in);
        }
    }

    private short age_;
    private java.lang.String name_;
    private int salary_;
    private java.lang.Integer bonus_;
    private tutorial.Role role_;
    private zserio.runtime.array.ObjectArray<tutorial.Experience> skills_;
}
