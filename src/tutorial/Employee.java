/**
 * Automatically generated by Zserio Java extension version 2.8.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package tutorial;

public class Employee implements zserio.runtime.io.InitializeOffsetsWriter, zserio.runtime.SizeOf
{
    public Employee()
    {
    }

    public Employee(java.io.File file)
            throws java.io.IOException
    {
        try (final zserio.runtime.io.FileBitStreamReader in = new zserio.runtime.io.FileBitStreamReader(file))
        {
            read(in);
        }
    }

    public Employee(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Employee(zserio.runtime.array.PackingContextNode contextNode, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(contextNode, in);
    }

    public Employee(
            short age_,
            java.lang.String name_,
            int salary_,
            java.lang.Integer bonus_,
            tutorial.Role role_,
            tutorial.Experience[] skills_)
    {
        setAge(age_);
        setName(name_);
        setSalary(salary_);
        setBonus(bonus_);
        setRole(role_);
        setSkills(skills_);
    }

    public static void createPackingContext(zserio.runtime.array.PackingContextNode contextNode)
    {
        contextNode.createChild().createContext();
        contextNode.createChild();
        contextNode.createChild().createContext();
        contextNode.createChild().createContext();
        tutorial.Role.createPackingContext(contextNode.createChild());
        contextNode.createChild();
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContextNode contextNode)
    {
        contextNode.getChildren().get(0).getContext().init(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(age_));
        contextNode.getChildren().get(2).getContext().init(
                new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(salary_));
        if (isBonusUsed())
        {
            contextNode.getChildren().get(3).getContext().init(
                    new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(bonus_));
        }
        role_.initPackingContext(contextNode.getChildren().get(4));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        endBitPosition += 16;
        endBitPosition += 1;
        if (isBonusUsed())
        {
            endBitPosition += 16;
        }
        endBitPosition += role_.bitSizeOf(endBitPosition);
        if (isSkillsUsed())
        {
            endBitPosition += skills_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContextNode contextNode, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += contextNode.getChildren().get(0).getContext().bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(age_));
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        endBitPosition += contextNode.getChildren().get(2).getContext().bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(salary_));
        endBitPosition += 1;
        if (isBonusUsed())
        {
            endBitPosition += contextNode.getChildren().get(3).getContext().bitSizeOf(
                    new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(bonus_));
        }
        endBitPosition += role_.bitSizeOf(contextNode.getChildren().get(4),
                endBitPosition);
        if (isSkillsUsed())
        {
            endBitPosition += skills_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public short getAge()
    {
        return age_;
    }

    public void setAge(short age_)
    {
        this.age_ = age_;
    }

    public java.lang.String getName()
    {
        return name_;
    }

    public void setName(java.lang.String name_)
    {
        this.name_ = name_;
    }

    public int getSalary()
    {
        return salary_;
    }

    public void setSalary(int salary_)
    {
        this.salary_ = salary_;
    }

    public java.lang.Integer getBonus()
    {
        return bonus_;
    }

    public void setBonus(java.lang.Integer bonus_)
    {
        this.bonus_ = bonus_;
    }

    public boolean isBonusUsed()
    {
        return isBonusSet();
    }

    public boolean isBonusSet()
    {
        return (bonus_ != null);
    }

    public void resetBonus()
    {
        bonus_ = null;
    }

    public tutorial.Role getRole()
    {
        return role_;
    }

    public void setRole(tutorial.Role role_)
    {
        this.role_ = role_;
    }

    public tutorial.Experience[] getSkills()
    {
        return (skills_ == null) ? null : skills_.getRawArray();
    }

    public void setSkills(tutorial.Experience[] skills_)
    {
        if (skills_ == null)
        {
            this.skills_ = null;
        }
        else
        {
            this.skills_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(tutorial.Experience.class, skills_),
                    new zserio.runtime.array.ArrayTraits.WriteObjectArrayTraits<tutorial.Experience>(new ZserioElementFactory_skills()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isSkillsUsed()
    {
        return (getRole() == tutorial.Role.DEVELOPER);
    }

    public boolean isSkillsSet()
    {
        return (skills_ != null);
    }

    public void resetSkills()
    {
        skills_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Employee)
        {
            final Employee that = (Employee)obj;

            return
                    age_ == that.age_ &&
                    ((name_ == null) ? that.name_ == null : name_.equals(that.name_)) &&
                    salary_ == that.salary_ &&
                    ((!isBonusUsed()) ? !that.isBonusUsed() :
                        ((bonus_ == null) ? that.bonus_ == null : bonus_.equals(that.bonus_))) &&
                    ((role_ == null) ? that.role_ == null : role_.getValue() == that.role_.getValue()) &&
                    ((!isSkillsUsed()) ? !that.isSkillsUsed() :
                        ((skills_ == null) ? that.skills_ == null : skills_.equals(that.skills_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, age_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, name_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, salary_);
        if (isBonusUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, bonus_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, role_);
        if (isSkillsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, skills_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        age_ = in.readUnsignedByte();

        name_ = in.readString();

        salary_ = in.readUnsignedShort();

        if (in.readBool())
        {
            bonus_ = in.readUnsignedShort();
        }

        role_ = tutorial.Role.readEnum(in);

        if (getRole() == tutorial.Role.DEVELOPER)
        {
            skills_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(tutorial.Experience.class),
                    new zserio.runtime.array.ArrayTraits.WriteObjectArrayTraits<tutorial.Experience>(new ZserioElementFactory_skills()),
                    zserio.runtime.array.ArrayType.AUTO);
            skills_.read(in);
        }

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContextNode contextNode, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        age_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                contextNode.getChildren().get(0).getContext().read(
                        new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();

        name_ = in.readString();

        salary_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                contextNode.getChildren().get(2).getContext().read(
                        new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)), in)).get();

        if (in.readBool())
        {
            bonus_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    contextNode.getChildren().get(3).getContext().read(
                            new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)), in)).get();
        }

        role_ = tutorial.Role.readEnum(contextNode.getChildren().get(4), in);

        if (getRole() == tutorial.Role.DEVELOPER)
        {
            skills_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(tutorial.Experience.class),
                    new zserio.runtime.array.ArrayTraits.WriteObjectArrayTraits<tutorial.Experience>(new ZserioElementFactory_skills()),
                    zserio.runtime.array.ArrayType.AUTO);
            skills_.readPacked(in);
        }

        checkConstraints();
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        endBitPosition += 16;
        endBitPosition += 1;
        if (isBonusUsed())
        {
            endBitPosition += 16;
        }
        endBitPosition += role_.bitSizeOf(endBitPosition);
        if (isSkillsUsed())
        {
            endBitPosition = skills_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContextNode contextNode, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += contextNode.getChildren().get(0).getContext().bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(age_));
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        endBitPosition += contextNode.getChildren().get(2).getContext().bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(salary_));
        endBitPosition += 1;
        if (isBonusUsed())
        {
            endBitPosition += contextNode.getChildren().get(3).getContext().bitSizeOf(
                    new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(bonus_));
        }
        endBitPosition = role_.initializeOffsets(contextNode.getChildren().get(4),
                endBitPosition);
        if (isSkillsUsed())
        {
            endBitPosition = skills_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    public void write(java.io.File file) throws java.io.IOException
    {
        try (final zserio.runtime.io.FileBitStreamWriter out = new zserio.runtime.io.FileBitStreamWriter(file))
        {
            write(out);
        }
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        write(out, true);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out, boolean callInitializeOffsets)
            throws java.io.IOException
    {
        checkConstraints();

        out.writeUnsignedByte(age_);

        out.writeString(name_);

        out.writeUnsignedShort(salary_);

        if (isBonusUsed())
        {
            out.writeBool(true);
            out.writeUnsignedShort(bonus_);
        }
        else
        {
            out.writeBool(false);
        }

        role_.write(out, false);

        if (isSkillsUsed())
        {
            skills_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContextNode contextNode,
            zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        contextNode.getChildren().get(0).getContext().write(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(age_));

        out.writeString(name_);

        contextNode.getChildren().get(2).getContext().write(
                new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(salary_));

        if (isBonusUsed())
        {
            out.writeBool(true);
            contextNode.getChildren().get(3).getContext().write(
                    new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(bonus_));
        }
        else
        {
            out.writeBool(false);
        }

        role_.write(contextNode.getChildren().get(4), out);

        if (isSkillsUsed())
        {
            skills_.writePacked(out);
        }
    }

    private void checkConstraints()
    {
        if (!(getAge() <= 65))
            throw new zserio.runtime.ConstraintError("Constraint violated at Employee.age!");
    }

    private static final class ZserioElementFactory_skills implements zserio.runtime.array.ElementFactory<tutorial.Experience>
    {
        @Override
        public tutorial.Experience create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new tutorial.Experience(in);
        }

        @Override
        public void createPackingContext(zserio.runtime.array.PackingContextNode contextNode)
        {
            tutorial.Experience.createPackingContext(contextNode);
        }

        @Override
        public tutorial.Experience create(zserio.runtime.array.PackingContextNode contextNode,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new tutorial.Experience(contextNode, in);
        }
    }

    private short age_;
    private java.lang.String name_;
    private int salary_;
    private java.lang.Integer bonus_;
    private tutorial.Role role_;
    private zserio.runtime.array.Array skills_;
}
