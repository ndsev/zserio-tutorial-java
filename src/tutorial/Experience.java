/**
 * Automatically generated by Zserio Java extension version 2.11.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package tutorial;

public class Experience implements zserio.runtime.io.Writer, zserio.runtime.SizeOf
{
    public Experience()
    {
    }

    public Experience(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Experience(zserio.runtime.array.PackingContextNode contextNode, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(contextNode, in);
    }

    public Experience(
            byte yearsOfExperience_,
            tutorial.Language programmingLanguage_)
    {
        setYearsOfExperience(yearsOfExperience_);
        setProgrammingLanguage(programmingLanguage_);
    }

    public static void createPackingContext(zserio.runtime.array.PackingContextNode contextNode)
    {
        contextNode.createChild().createContext();
        tutorial.Language.createPackingContext(contextNode.createChild());
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContextNode contextNode)
    {
        contextNode.getChildren().get(0).getContext().init(
                new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(6)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(yearsOfExperience_));
        programmingLanguage_.initPackingContext(contextNode.getChildren().get(1));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 6;
        endBitPosition += programmingLanguage_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContextNode contextNode, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += contextNode.getChildren().get(0).getContext().bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(6)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(yearsOfExperience_));
        endBitPosition += programmingLanguage_.bitSizeOf(contextNode.getChildren().get(1),
                endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public byte getYearsOfExperience()
    {
        return yearsOfExperience_;
    }

    public void setYearsOfExperience(byte yearsOfExperience_)
    {
        this.yearsOfExperience_ = yearsOfExperience_;
    }

    public tutorial.Language getProgrammingLanguage()
    {
        return programmingLanguage_;
    }

    public void setProgrammingLanguage(tutorial.Language programmingLanguage_)
    {
        this.programmingLanguage_ = programmingLanguage_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Experience)
        {
            final Experience that = (Experience)obj;

            return
                    yearsOfExperience_ == that.yearsOfExperience_ &&
                    ((programmingLanguage_ == null) ? that.programmingLanguage_ == null : programmingLanguage_.getValue() == that.programmingLanguage_.getValue());
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, yearsOfExperience_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, programmingLanguage_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        yearsOfExperience_ = (byte)in.readBits(6);

        programmingLanguage_ = tutorial.Language.readEnum(in);
    }

    public void read(zserio.runtime.array.PackingContextNode contextNode, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        yearsOfExperience_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                contextNode.getChildren().get(0).getContext().read(
                        new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(6)), in)).get();

        programmingLanguage_ = tutorial.Language.readEnum(contextNode.getChildren().get(1), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 6;
        endBitPosition += programmingLanguage_.bitSizeOf(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContextNode contextNode, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += contextNode.getChildren().get(0).getContext().bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(6)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(yearsOfExperience_));
        endBitPosition = programmingLanguage_.initializeOffsets(contextNode.getChildren().get(1),
                endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBits(yearsOfExperience_, 6);

        programmingLanguage_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContextNode contextNode,
            zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        contextNode.getChildren().get(0).getContext().write(
                new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(6)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(yearsOfExperience_));

        programmingLanguage_.write(contextNode.getChildren().get(1), out);
    }

    private byte yearsOfExperience_;
    private tutorial.Language programmingLanguage_;
}
