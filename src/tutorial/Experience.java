/**
 * Automatically generated by Zserio Java extension version 1.3.0.
 */

package tutorial;

import javax.annotation.Generated;
import java.io.IOException;
import java.io.File;
import zserio.runtime.SizeOf;
import zserio.runtime.io.BitStreamReader;
import zserio.runtime.io.FileBitStreamReader;
import zserio.runtime.ZserioError;
import zserio.runtime.Util;
import zserio.runtime.io.BitStreamWriter;
import zserio.runtime.io.FileBitStreamWriter;
import zserio.runtime.io.InitializeOffsetsWriter;

@Generated(
    value = "zserio.tools.ZserioTool",
    comments = "generated by Zserio Java extension version 1.3.0"
)
public class Experience implements InitializeOffsetsWriter, SizeOf
{
    public Experience()
    {
    }

    public Experience(File __file) throws IOException, ZserioError
    {
        final FileBitStreamReader __in = new FileBitStreamReader(__file);
        read(__in);
        __in.close();
    }

    public Experience(BitStreamReader __in) throws IOException, ZserioError
    {
        read(__in);
    }

    public Experience(
        byte yearsOfExperience,
        tutorial.Language programmingLanguage)
    {
        setYearsOfExperience(yearsOfExperience);
        setProgrammingLanguage(programmingLanguage);
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long __bitPosition)
    {
        long __endBitPosition = __bitPosition;

        __endBitPosition += 6;
        __endBitPosition += getProgrammingLanguage().bitSizeOf(__endBitPosition);

        return (int)(__endBitPosition - __bitPosition);
    }

    public byte getYearsOfExperience()
    {
        return this.yearsOfExperience;
    }

    public void setYearsOfExperience(byte yearsOfExperience)
    {
        this.yearsOfExperience = yearsOfExperience;
    }

    public tutorial.Language getProgrammingLanguage()
    {
        return this.programmingLanguage;
    }

    public void setProgrammingLanguage(tutorial.Language programmingLanguage)
    {
        this.programmingLanguage = programmingLanguage;
    }

    @Override
    public boolean equals(Object obj)
    {
        if (obj instanceof Experience)
        {
            final Experience __that = (Experience)obj;

            return
                    this.yearsOfExperience == __that.yearsOfExperience &&
                    ((this.programmingLanguage == null) ? __that.programmingLanguage == null : this.programmingLanguage.getValue() == __that.programmingLanguage.getValue());
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int __result = Util.HASH_SEED;

        __result = Util.HASH_PRIME_NUMBER * __result + yearsOfExperience;
        __result = Util.HASH_PRIME_NUMBER * __result + ((programmingLanguage == null) ? 0 : programmingLanguage.hashCode());

        return __result;
    }

    public void read(final BitStreamReader __in) throws IOException, ZserioError
    {
        yearsOfExperience = (byte)__in.readBits(6);

        programmingLanguage = tutorial.Language.readEnum(__in);
    }

    public long initializeOffsets(long __bitPosition)
    {
        long __endBitPosition = __bitPosition;

        __endBitPosition += 6;
        __endBitPosition += getProgrammingLanguage().bitSizeOf(__endBitPosition);

        return __endBitPosition;
    }

    public void write(File __file) throws IOException, ZserioError
    {
        FileBitStreamWriter __out = new FileBitStreamWriter(__file);
        write(__out);
        __out.close();
    }

    @Override
    public void write(BitStreamWriter __out) throws IOException, ZserioError
    {
        write(__out, true);
    }

    @Override
    public void write(BitStreamWriter __out, boolean __callInitializeOffsets) throws IOException, ZserioError
    {
        __out.writeBits(getYearsOfExperience(), 6);

        getProgrammingLanguage().write(__out, false);
    }

    private byte yearsOfExperience;
    private tutorial.Language programmingLanguage;
}
